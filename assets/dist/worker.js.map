{"version":3,"file":"worker.js","sources":["../src/types.js","../src/array.js","../src/dict.js","../src/function.js"],"sourcesContent":["// @flow\r\n\r\nexport function isObject(value: any): boolean {\r\n    return typeof value === \"object\" && value !== null && value.constructor === Object;\r\n}\r\n\r\nexport function isNumber(value: any): boolean {\r\n    return typeof value === \"number\" && !Number.isNaN(value) && Number.isFinite(value);\r\n}\r\n\r\nexport default {\r\n    isObject,\r\n    isNumber,\r\n};\r\n","// @flow\r\n\r\nimport {isNumber} from \"./types\";\r\n\r\nfunction checkDataAndIndex(data: any, index: number): boolean {\r\n    if (!Array.isArray(data)) {\r\n        throw new Error(\"data must be an Array\");\r\n    }\r\n\r\n    if (!isNumber(index)) {\r\n        throw new Error(\"index must be a Number\");\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction updateAt(data: any, index: number, value: any): any[] {\r\n    return checkDataAndIndex(data, index) && index >= 0 && index < data.length\r\n        ? data.slice(0, index).concat(value).concat(data.slice(index))\r\n        : data;\r\n}\r\n\r\nfunction at(data: any, index: number, defaultValue: any = null): any[] {\r\n    return checkDataAndIndex(data, index) && index >= 0 && index < data.length\r\n        ? data[index]\r\n        : defaultValue;\r\n}\r\n\r\nexport default {\r\n    updateAt,\r\n    at,\r\n}\r\n\r\n","// @flow\r\n\r\nimport {isObject} from \"./types\";\r\n\r\nfunction checkDataAndKey(data: any, key: any): boolean {\r\n    if (!isObject(data)) {\r\n        throw new Error(\"data must be an Object\");\r\n    }\r\n\r\n    if (typeof key !== \"string\") {\r\n        throw new Error(\"key must be a string\");\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction get(data: any, key: string, defaultValue: any = null): any {\r\n    return checkDataAndKey(data, key) && (key in data) ? data[key] : defaultValue;\r\n}\r\n\r\nfunction put(data: any, key: string, value: any): any {\r\n    return checkDataAndKey(data, key) && {...data, [key]: value};\r\n}\r\n\r\nexport default {\r\n    get,\r\n    put,\r\n}\r\n","// @flow\r\n\r\nimport {isNumber, isObject} from \"./types\";\r\n\r\nexport function pipe(): (value: any) => any {\r\n    const fns = arguments;\r\n\r\n    return function _pipe(value: any): any {\r\n        let result = value;\r\n\r\n        for (let i = 0; i < fns.length; i++) {\r\n            result = fns[i](result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction matchObjects(a: any, b: any): boolean {\r\n    for (let k in b) {\r\n        if (!(k in a) || !match(a[k], b[k])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction matchArrays(a: any[], b: any[]): boolean {\r\n    if (a.length >= b.length) {\r\n        for (let i = 0; i < b.length; i++) {\r\n            if (!match(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function match(a: any, b: any): boolean {\r\n    if (b === \"*\") {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        (typeof a === \"string\" && typeof b === \"string\") ||\r\n        (isNumber(a) && isNumber(b))\r\n    ) {\r\n        return a === b;\r\n    }\r\n\r\n    if (isObject(a) && isObject(b)) {\r\n        return matchObjects(a, b);\r\n    }\r\n\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n        return matchArrays(a, b);\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function matchFn(b: any, callback: (any) => void) {\r\n    return function _matchFn(a) {\r\n        if (match(a, b)) {\r\n            callback(a);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default {\r\n    pipe,\r\n    match,\r\n    matchFn,\r\n}\r\n"],"names":[],"mappings":";;;;;2BAEmC;;;;2BAIA;;;;;;;;;;;mCCFJ,OAAY;;;;;;;;;;;;0BAYhB,OAAe,OAAY;;;;;;oBAMjC,OAAe,cAAmB;;;;;;;;;;;;;iCClB1B,KAAU;;;;;;;;;;;;qBAYjB,KAAa,cAAmB;;;;qBAIhC,KAAa,OAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCCbX;;;;;;;;;;;2BAWb,GAAQ;;;;;;;;;;0BAUT,GAAU;;;;;;;;;;;;oBAYT,GAAQ;;;;;;;;;;;;;;;;;;;;;;;sBAuBD,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}