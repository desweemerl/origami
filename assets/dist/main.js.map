{"version":3,"file":"main.js","sources":["../src/unit.js","../src/types.js","../src/array.js","../src/dict.js","../src/function.js","../src/main.js"],"sourcesContent":["// @flow\r\n\r\n/**\r\n * Unit can be worker or component.\r\n */\r\nlet id = 0; // ID counter\r\nconst aliases: { [alias: string]: number } = {};\r\nconst units = {}; // Unit store\r\n\r\nconst messageCbs = [];\r\nconst registrationCbs = [];\r\nconst unregistrationCbs = [];\r\n\r\nfunction seekCb(cbs) {\r\n    return function _seekCallback(arg) {\r\n        for (let i = 0; i < cbs.length; i++) {\r\n            if (cbs[i](arg)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nconst seekMessageCbs = seekCb(messageCbs);\r\nconst seekRegistrationCbs = seekCb(registrationCbs);\r\nconst seekUnregistrationCbs = seekCb(unregistrationCbs);\r\n\r\nfunction pushCallback(callbacks) {\r\n    return function _pushCallback() {\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            const fn = arguments[i];\r\n\r\n            if (typeof fn !== \"function\") {\r\n                throw new Error(`argument ${i} must be a function`);\r\n            }\r\n\r\n            callbacks.push(fn);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport const addMessageCbs = pushCallback(messageCbs);\r\nexport const addRegistrationCbs = pushCallback(registrationCbs);\r\nexport const addUnregistrationCbs = pushCallback(unregistrationCbs);\r\n\r\nfunction checkId(id: number): boolean {\r\n    if (!(id in units)) {\r\n        throw new Error(`unit with id ${id} doesn't exist`);\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\nfunction getIdFromAlias(alias: string): number {\r\n    if (!(alias in aliases)) {\r\n        throw new Error(`alias ${idOrAlias} is not registered`);\r\n    }\r\n\r\n    return aliases[alias];\r\n}\r\n\r\nfunction getUnitId(idOrAlias: number | string): number {\r\n    return typeof idOrAlias === \"string\"\r\n        ? getIdFromAlias(idOrAlias)\r\n        : idOrAlias;\r\n}\r\n\r\nfunction checkAndGetUnit(id): any {\r\n    return units[checkId(id)];\r\n}\r\n\r\nexport function getUnit(idOrAlias: number | string): any {\r\n    const id = getUnitId(idOrAlias);\r\n\r\n    return checkAndGetUnit(id);\r\n}\r\n\r\nexport function send(idOrAlias: number | string, message: any): true {\r\n    const id = getUnitId(idOrAlias);\r\n    const unit = checkAndGetUnit(id);\r\n\r\n    return seekMessageCbs({unit, message, id});\r\n}\r\n\r\nexport function registerUnit(unit, alias) {\r\n    const unitId = id;\r\n\r\n    if (alias) {\r\n        if (typeof alias !== \"string\") {\r\n            throw new Error(\"bad alias\");\r\n        }\r\n\r\n        if (alias in aliases) {\r\n            throw new Error(`alias ${alias} has been already registered`);\r\n        }\r\n\r\n        aliases[alias] = unitId;\r\n    }\r\n\r\n    seekRegistrationCbs({unit, id, alias});\r\n    units[id++] = unit;\r\n\r\n    return unitId;\r\n}\r\n\r\nexport function unregisterUnit(idOrAlias) {\r\n    let id = idOrAlias;\r\n    let alias = null;\r\n\r\n    if (typeof idOrAlias === \"string\") {\r\n        alias = idOrAlias;\r\n        id = getIdFromAlias(alias);\r\n        delete (aliases[alias]);\r\n    }\r\n\r\n    const unit = getUnit(id);\r\n    seekUnregistrationCbs({unit, id, alias});\r\n\r\n    delete (units[id]);\r\n\r\n    return id;\r\n}\r\n\r\n","// @flow\r\n\r\nexport function isObject(value: any): boolean {\r\n    return typeof value === \"object\" && value !== null && value.constructor === Object;\r\n}\r\n\r\nexport function isNumber(value: any): boolean {\r\n    return typeof value === \"number\" && !Number.isNaN(value) && Number.isFinite(value);\r\n}\r\n\r\nexport default {\r\n    isObject,\r\n    isNumber,\r\n};\r\n","// @flow\r\n\r\nimport {isNumber} from \"./types\";\r\n\r\nfunction checkDataAndIndex(data: any, index: number): boolean {\r\n    if (!Array.isArray(data)) {\r\n        throw new Error(\"data must be an Array\");\r\n    }\r\n\r\n    if (!isNumber(index)) {\r\n        throw new Error(\"index must be a Number\");\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction updateAt(data: any, index: number, value: any): any[] {\r\n    return checkDataAndIndex(data, index) && index >= 0 && index < data.length\r\n        ? data.slice(0, index).concat(value).concat(data.slice(index))\r\n        : data;\r\n}\r\n\r\nfunction at(data: any, index: number, defaultValue: any = null): any[] {\r\n    return checkDataAndIndex(data, index) && index >= 0 && index < data.length\r\n        ? data[index]\r\n        : defaultValue;\r\n}\r\n\r\nexport default {\r\n    updateAt,\r\n    at,\r\n}\r\n\r\n","// @flow\r\n\r\nimport {isObject} from \"./types\";\r\n\r\nfunction checkDataAndKey(data: any, key: any): boolean {\r\n    if (!isObject(data)) {\r\n        throw new Error(\"data must be an Object\");\r\n    }\r\n\r\n    if (typeof key !== \"string\") {\r\n        throw new Error(\"key must be a string\");\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction get(data: any, key: string, defaultValue: any = null): any {\r\n    return checkDataAndKey(data, key) && (key in data) ? data[key] : defaultValue;\r\n}\r\n\r\nfunction put(data: any, key: string, value: any): any {\r\n    return checkDataAndKey(data, key) && {...data, [key]: value};\r\n}\r\n\r\nexport default {\r\n    get,\r\n    put,\r\n}\r\n","// @flow\r\n\r\nimport {isNumber, isObject} from \"./types\";\r\n\r\nexport function pipe(): (value: any) => any {\r\n    const fns = arguments;\r\n\r\n    return function _pipe(value: any): any {\r\n        let result = value;\r\n\r\n        for (let i = 0; i < fns.length; i++) {\r\n            result = fns[i](result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction matchObjects(a: any, b: any): boolean {\r\n    for (let k in b) {\r\n        if (!(k in a) || !match(a[k], b[k])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction matchArrays(a: any[], b: any[]): boolean {\r\n    if (a.length >= b.length) {\r\n        for (let i = 0; i < b.length; i++) {\r\n            if (!match(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function match(a: any, b: any): boolean {\r\n    if (b === \"*\") {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        (typeof a === \"string\" && typeof b === \"string\") ||\r\n        (isNumber(a) && isNumber(b))\r\n    ) {\r\n        return a === b;\r\n    }\r\n\r\n    if (isObject(a) && isObject(b)) {\r\n        return matchObjects(a, b);\r\n    }\r\n\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n        return matchArrays(a, b);\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function matchFn(b: any, callback: (any) => void) {\r\n    return function _matchFn(a) {\r\n        if (match(a, b)) {\r\n            callback(a);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default {\r\n    pipe,\r\n    match,\r\n    matchFn,\r\n}\r\n","// @flow\r\n\r\nimport {addMessageCbs, addUnregistrationCbs, registerUnit, send, unregisterUnit} from \"./unit\";\r\nimport logger from \"./logger\";\r\nimport core from \"./core\";\r\nimport {receiversFactory} from \"./receiver\";\r\nimport {attachComponent, createComponent, deleteComponent, detachComponent} from \"./component\";\r\n\r\nconst mainReceivers = receiversFactory();\r\n\r\nfunction createWorker(jsFile: string, alias: string) {\r\n    return new Promise(\r\n        function _createWorker(resolve, reject) {\r\n            if (typeof jsFile !== \"string\" || !jsFile) {\r\n                return reject(\"bad jsFile\");\r\n            }\r\n\r\n            const worker = new Worker(jsFile);\r\n            const id = registerUnit(worker, alias);\r\n\r\n            worker.onerror = function _onWorkerError(err) {\r\n                console.log(err);\r\n                //logger.debug(`Failed to create worker with js ${jsFile}`, err);\r\n                unregisterUnit(id);\r\n                reject(err);\r\n            };\r\n\r\n            worker.postMessage({\r\n                action: \"init\",\r\n                id: id,\r\n                alias,\r\n            });\r\n\r\n            let firstMessage = true;\r\n\r\n            worker.onmessage = function _onWorkerMessage(event) {\r\n                logger.debug(`Receiving data from worker with id ${id}: ${JSON.stringify(event.data)}`);\r\n\r\n                if (firstMessage) {\r\n                    firstMessage = false;\r\n                    resolve({id, worker, alias});\r\n                }\r\n\r\n                mainReceivers.sendToReceivers(event.data);\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nfunction deleteWorker(idOrAlias: number): boolean {\r\n    return unregisterUnit(idOrAlias);\r\n}\r\n\r\nfunction processWorkerMessage({unit, message}): boolean {\r\n    if (unit instanceof Worker) {\r\n        unit.postMessage(message);\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction processWorkerUnregistration({unit}): boolean {\r\n    if (unit instanceof Worker) {\r\n        unit.terminate();\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n// Core callbacks\r\naddMessageCbs(processWorkerMessage);\r\naddUnregistrationCbs(processWorkerUnregistration);\r\n\r\nexport default {\r\n    ...core,\r\n    ...mainReceivers,\r\n    createWorker,\r\n    deleteWorker,\r\n    createComponent,\r\n    deleteComponent,\r\n    attachComponent,\r\n    detachComponent,\r\n    registerUnit,\r\n    unregisterUnit,\r\n    send,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;iBAMa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA2Cc;;;;;;;;iCAQU;;;;;;;;gCAQQ;;;;;;;;;;8BAUK;;;;;;2BAMpB,SAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BC/ErB;;;;2BAIA;;;;;;;;;;;mCCFJ,OAAY;;;;;;;;;;;;0BAYhB,OAAe,OAAY;;;;;;oBAMjC,OAAe,cAAmB;;;;;;;;;;;;;iCClB1B,KAAU;;;;;;;;;;;;qBAYjB,KAAa,cAAmB;;;;qBAIhC,KAAa,OAAY;;;;;;;;;;;;;;mCCbX;;;;;;;;;;;2BAWb,GAAQ;;;;;;;;;;0BAUT,GAAU;;;;;;;;;;;;oBAYT,GAAQ;;;;;;;;;;;;;;;;;;;;;;;sBAuBD,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCCrDJ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAuCJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}